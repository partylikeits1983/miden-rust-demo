package miden:core-intrinsics@1.0.0;

// The function signatures should be kept in sync with the signatures in the
// Rust SDK `extern` functions (see `/sdk`) using `f32` instead of `Felt` type;

interface intrinsics-mem {

    heap-base: func() -> s32;
}

interface intrinsics-felt {

    // See sdk/stdlib-sys/src/intrinsics/felt.rs for `extern` function signatures

    // Conversion operations
    from-u64-unchecked: func(a: u64) -> f32;
    from-u32: func(a: u32) -> f32;
    as-u64: func(a: f32) -> u64;

    // Arithmetic operations
    add: func(a: f32, b: f32) -> f32;
    sub: func(a: f32, b: f32) -> f32;
    mul: func(a: f32, b: f32) -> f32;
    div: func(a: f32, b: f32) -> f32;
    neg: func(a: f32) -> f32;
    inv: func(a: f32) -> f32;
    pow2: func(a: f32) -> f32;
    exp: func(a: f32, b: f32) -> f32;

    // Comparison operations
    eq: func(a: f32, b: f32) -> s32;
    gt: func(a: f32, b: f32) -> s32;
    lt: func(a: f32, b: f32) -> s32;
    ge: func(a: f32, b: f32) -> s32;
    le: func(a: f32, b: f32) -> s32;
    is-odd: func(a: f32) -> s32;

    // Assertion operations
    assert: func(a: f32);
    assertz: func(a: f32);
    assert-eq: func(a: f32, b: f32);
}

interface intrinsics-debug {

    break: func();

}

interface intrinsics-crypto {

    // See sdk/stdlib-sys/src/intrinsics/crypto.rs for `extern` function signatures

    // Hash merge operation - takes pointer to array of two digests and writes result to output pointer
    hmerge: func(digests-ptr: s32, result-ptr: s32);
}

interface intrinsics-advice {

    // Pushes a list of field elements onto the advice stack. The list is looked up in the advice map using `key` as the key.
    // Returns the number of elements pushed on the advice stack.
    // key: Word (4 f32 values representing the key)
    adv-push-mapvaln: func(key0: f32, key1: f32, key2: f32, key3: f32) -> f32;
}

world intrinsics {
    import intrinsics-mem;
    import intrinsics-felt;
    import intrinsics-debug;
    import intrinsics-crypto;
    import intrinsics-advice;
}

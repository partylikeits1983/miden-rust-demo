// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * skip: ["remove-asset", "create-note", "heap-base", "hash-one-to-one", "hash-two-to-one", "add-asset", "unchecked-from-u64"]
//   * runtime_path: "wit_bindgen_rt"
//   * with "miden:base/core-types@1.0.0/account-id" = "miden::AccountId"
//   * with "miden:base/core-types@1.0.0/felt" = "miden::Felt"
//   * with "miden:base/core-types@1.0.0/note-type" = "miden::NoteType"
//   * with "miden:base/core-types@1.0.0/note-idx" = "miden::NoteIdx"
//   * with "miden:base/core-types@1.0.0/word" = "miden::Word"
//   * with "miden:base/core-types@1.0.0/asset" = "miden::Asset"
//   * with "miden:base/core-types@1.0.0/recipient" = "miden::Recipient"
//   * with "miden:base/core-types@1.0.0/tag" = "miden::Tag"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod miden {
    pub mod base {
        /// Types to be used in tx-kernel interface
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod core_types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
        }
    }
    pub mod core_base {
        /// The function signatures should be kept in sync with the signatures in the
        /// Rust SDK `extern` functions (see `/sdk`);
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod account {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// Get the id of the currently executing account
            pub fn get_id(result_ptr: i32) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:core-base/account@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "get-id"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i32(&result_ptr)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets an item from the account storage
            pub fn get_item(index: f32, result_ptr: i32) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:core-base/account@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "get-item"]
                        fn wit_import0(_: f32, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: i32) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(_rt::as_f32(&index), _rt::as_i32(&result_ptr))
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets an item in the account storage
            pub fn set_item(
                index: f32,
                value0: f32,
                value1: f32,
                value2: f32,
                value3: f32,
                result_ptr: i32,
            ) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:core-base/account@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "set-item"]
                        fn wit_import0(_: f32, _: f32, _: f32, _: f32, _: f32, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            _rt::as_f32(&index),
                            _rt::as_f32(&value0),
                            _rt::as_f32(&value1),
                            _rt::as_f32(&value2),
                            _rt::as_f32(&value3),
                            _rt::as_i32(&result_ptr),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets a map item from the account storage
            pub fn get_map_item(
                index: f32,
                key0: f32,
                key1: f32,
                key2: f32,
                key3: f32,
                result_ptr: i32,
            ) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:core-base/account@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "get-map-item"]
                        fn wit_import0(_: f32, _: f32, _: f32, _: f32, _: f32, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            _rt::as_f32(&index),
                            _rt::as_f32(&key0),
                            _rt::as_f32(&key1),
                            _rt::as_f32(&key2),
                            _rt::as_f32(&key3),
                            _rt::as_i32(&result_ptr),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets a map item in the account storage
            pub fn set_map_item(
                index: f32,
                key0: f32,
                key1: f32,
                key2: f32,
                key3: f32,
                value0: f32,
                value1: f32,
                value2: f32,
                value3: f32,
                result_ptr: i32,
            ) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:core-base/account@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "set-map-item"]
                        fn wit_import0(
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: i32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            _rt::as_f32(&index),
                            _rt::as_f32(&key0),
                            _rt::as_f32(&key1),
                            _rt::as_f32(&key2),
                            _rt::as_f32(&key3),
                            _rt::as_f32(&value0),
                            _rt::as_f32(&value1),
                            _rt::as_f32(&value2),
                            _rt::as_f32(&value3),
                            _rt::as_i32(&result_ptr),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Increments the account nonce by the provided value.
            pub fn incr_nonce(value: u32) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:core-base/account@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "incr-nonce"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i32(&value)) };
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod note {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// Get the inputs of the currently executed note
            pub fn get_inputs(ptr: i32) -> i32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:core-base/note@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "get-inputs"]
                        fn wit_import0(_: i32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i32(&ptr)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the assets of the currently executing note
            pub fn get_assets(ptr: i32) -> i32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:core-base/note@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "get-assets"]
                        fn wit_import0(_: i32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i32(&ptr)) };
                    ret
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod tx {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// Adds the ASSET to the note specified by the index.
            ///
            /// Inputs:  [ASSET, note_idx]
            /// Outputs: [ASSET, note_idx]
            ///
            /// Where:
            /// - note_idx is the index of the note to which the asset is added.
            /// - ASSET can be a fungible or non-fungible asset.
            pub fn add_asset_to_note(
                asset0: f32,
                asset1: f32,
                asset2: f32,
                asset3: f32,
                note_idx: f32,
                result_ptr: i32,
            ) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:core-base/tx@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "add-asset-to-note"]
                        fn wit_import0(_: f32, _: f32, _: f32, _: f32, _: f32, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            _rt::as_f32(&asset0),
                            _rt::as_f32(&asset1),
                            _rt::as_f32(&asset2),
                            _rt::as_f32(&asset3),
                            _rt::as_f32(&note_idx),
                            _rt::as_i32(&result_ptr),
                        )
                    };
                }
            }
        }
    }
    pub mod core_intrinsics {
        /// The function signatures should be kept in sync with the signatures in the
        /// Rust SDK `extern` functions (see `/sdk`) using `f32` instead of `Felt` type;
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod intrinsics_mem {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod intrinsics_felt {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// See sdk/stdlib-sys/src/intrinsics/felt.rs for `extern` function signatures
            /// Conversion operations
            pub fn from_u64_unchecked(a: u64) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "from-u64-unchecked"]
                        fn wit_import0(_: i64) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(&a)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn from_u32(a: u32) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "from-u32"]
                        fn wit_import0(_: i32) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i32(&a)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn as_u64(a: f32) -> u64 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "as-u64"]
                        fn wit_import0(_: f32) -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32) -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a)) };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Arithmetic operations
            pub fn add(a: f32, b: f32) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "add"]
                        fn wit_import0(_: f32, _: f32) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn sub(a: f32, b: f32) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "sub"]
                        fn wit_import0(_: f32, _: f32) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn mul(a: f32, b: f32) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "mul"]
                        fn wit_import0(_: f32, _: f32) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn div(a: f32, b: f32) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "div"]
                        fn wit_import0(_: f32, _: f32) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn neg(a: f32) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "neg"]
                        fn wit_import0(_: f32) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn inv(a: f32) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "inv"]
                        fn wit_import0(_: f32) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn pow2(a: f32) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "pow2"]
                        fn wit_import0(_: f32) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn exp(a: f32, b: f32) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "exp"]
                        fn wit_import0(_: f32, _: f32) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Comparison operations
            pub fn eq(a: f32, b: f32) -> i32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "eq"]
                        fn wit_import0(_: f32, _: f32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn gt(a: f32, b: f32) -> i32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "gt"]
                        fn wit_import0(_: f32, _: f32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn lt(a: f32, b: f32) -> i32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "lt"]
                        fn wit_import0(_: f32, _: f32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn ge(a: f32, b: f32) -> i32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "ge"]
                        fn wit_import0(_: f32, _: f32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn le(a: f32, b: f32) -> i32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "le"]
                        fn wit_import0(_: f32, _: f32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn is_odd(a: f32) -> i32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "is-odd"]
                        fn wit_import0(_: f32) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_f32(&a)) };
                    ret
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Assertion operations
            pub fn assert(a: f32) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "assert"]
                        fn wit_import0(_: f32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_f32(&a)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn assertz(a: f32) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "assertz"]
                        fn wit_import0(_: f32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_f32(&a)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn assert_eq(a: f32, b: f32) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-felt@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "assert-eq"]
                        fn wit_import0(_: f32, _: f32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: f32, _: f32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_f32(&a), _rt::as_f32(&b)) };
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod intrinsics_debug {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[allow(unused_unsafe, clippy::all)]
            pub fn break_() -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-debug@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "break"]
                        fn wit_import0();
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() {
                        unreachable!()
                    }
                    unsafe { wit_import0() };
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod intrinsics_crypto {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// See sdk/stdlib-sys/src/intrinsics/crypto.rs for `extern` function signatures
            /// Hash merge operation - takes pointer to array of two digests and writes result to output pointer
            pub fn hmerge(digests_ptr: i32, result_ptr: i32) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-crypto@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "hmerge"]
                        fn wit_import0(_: i32, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32, _: i32) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(_rt::as_i32(&digests_ptr), _rt::as_i32(&result_ptr))
                    };
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod intrinsics_advice {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            /// Pushes a list of field elements onto the advice stack. The list is looked up in the advice map using `key` as the key.
            /// Returns the number of elements pushed on the advice stack.
            /// key: Word (4 f32 values representing the key)
            pub fn adv_push_mapvaln(key0: f32, key1: f32, key2: f32, key3: f32) -> f32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(
                        wasm_import_module = "miden:core-intrinsics/intrinsics-advice@1.0.0"
                    )]
                    unsafe extern "C" {
                        #[link_name = "adv-push-mapvaln"]
                        fn wit_import0(_: f32, _: f32, _: f32, _: f32) -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                    ) -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import0(
                            _rt::as_f32(&key0),
                            _rt::as_f32(&key1),
                            _rt::as_f32(&key2),
                            _rt::as_f32(&key3),
                        )
                    };
                    ret
                }
            }
        }
    }
    pub mod core_stdlib {
        /// The function signatures should be kept in sync with the signatures in the
        /// Rust SDK `extern` functions (see `/sdk`);
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod stdlib_crypto_hashes_blake3 {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod stdlib_mem {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[allow(unused_unsafe, clippy::all)]
            pub fn pipe_preimage_to_memory(
                num_words: f32,
                result_ptr: i32,
                c0: f32,
                c1: f32,
                c2: f32,
                c3: f32,
            ) -> i32 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:core-stdlib/stdlib-mem@1.0.0")]
                    unsafe extern "C" {
                        #[link_name = "pipe-preimage-to-memory"]
                        fn wit_import0(
                            _: f32,
                            _: i32,
                            _: f32,
                            _: f32,
                            _: f32,
                            _: f32,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(
                        _: f32,
                        _: i32,
                        _: f32,
                        _: f32,
                        _: f32,
                        _: f32,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import0(
                            _rt::as_f32(&num_words),
                            _rt::as_i32(&result_ptr),
                            _rt::as_f32(&c0),
                            _rt::as_f32(&c1),
                            _rt::as_f32(&c2),
                            _rt::as_f32(&c3),
                        )
                    };
                    ret
                }
            }
        }
    }
    pub mod counter_contract {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod counter {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current counter value stored in the contract's storage.
            pub fn get_count() -> miden::Felt {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:counter-contract/counter@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "get-count"]
                        fn wit_import0() -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    miden::Felt { inner: ret }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Increments the counter value stored in the contract's storage by one
            /// and return the new counter value
            pub fn increment_count() -> miden::Felt {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "miden:counter-contract/counter@0.1.0")]
                    unsafe extern "C" {
                        #[link_name = "increment-count"]
                        fn wit_import0() -> f32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> f32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    miden::Felt { inner: ret }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod miden {
        pub mod base {
            /// The note script interface that is expected to be implemented by note scripts.
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod note_script {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_run_cabi<T: Guest>(
                    arg0: f32,
                    arg1: f32,
                    arg2: f32,
                    arg3: f32,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::run(miden::Word {
                        inner: (
                            miden::Felt { inner: arg0 },
                            miden::Felt { inner: arg1 },
                            miden::Felt { inner: arg2 },
                            miden::Felt { inner: arg3 },
                        ),
                    });
                }
                pub trait Guest {
                    fn run(arg: miden::Word) -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_miden_base_note_script_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "miden:base/note-script@1.0.0#run")] unsafe extern "C" fn
                        export_run(arg0 : f32, arg1 : f32, arg2 : f32, arg3 : f32,) {
                        unsafe { $($path_to_types)*:: _export_run_cabi::<$ty > (arg0,
                        arg1, arg2, arg3) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_miden_base_note_script_1_0_0_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_counter_contract_note_world_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::miden::base::note_script::__export_miden_base_note_script_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::miden::base::note_script);
    };
}
#[doc(inline)]
pub(crate) use __export_counter_contract_note_world_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:miden:counter-contract-note@0.1.0:counter-contract-note-world:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2523] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc9\x12\x01A\x02\x01\
A\x1c\x01B#\x01r\x01\x05innerv\x04\0\x04felt\x03\0\0\x01o\x04\x01\x01\x01\x01\x01\
r\x01\x05inner\x02\x04\0\x04word\x03\0\x03\x01r\x01\x05inner\x04\x04\0\x06digest\
\x03\0\x05\x01r\x02\x06prefix\x01\x06suffix\x01\x04\0\x0aaccount-id\x03\0\x07\x01\
r\x01\x05inner\x04\x04\0\x09recipient\x03\0\x09\x01r\x01\x05inner\x01\x04\0\x03t\
ag\x03\0\x0b\x01r\x01\x05inner\x04\x04\0\x05asset\x03\0\x0d\x01r\x01\x05inner\x01\
\x04\0\x05nonce\x03\0\x0f\x01r\x01\x05inner\x04\x04\0\x0caccount-hash\x03\0\x11\x01\
r\x01\x05inner\x04\x04\0\x0ablock-hash\x03\0\x13\x01r\x01\x05inner\x04\x04\0\x0d\
storage-value\x03\0\x15\x01r\x01\x05inner\x04\x04\0\x0cstorage-root\x03\0\x17\x01\
r\x01\x05inner\x04\x04\0\x11account-code-root\x03\0\x19\x01r\x01\x05inner\x04\x04\
\0\x10vault-commitment\x03\0\x1b\x01r\x01\x05inner\x01\x04\0\x08note-idx\x03\0\x1d\
\x01r\x01\x05inner\x01\x04\0\x09note-type\x03\0\x1f\x01r\x01\x05inner\x01\x04\0\x13\
note-execution-hint\x03\0!\x03\0\x1bmiden:base/core-types@1.0.0\x05\0\x02\x03\0\0\
\x04felt\x01B\x05\x02\x03\x02\x01\x01\x04\0\x04felt\x03\0\0\x01@\0\0\x01\x04\0\x09\
get-count\x01\x02\x04\0\x0fincrement-count\x01\x02\x03\0$miden:counter-contract/\
counter@0.1.0\x05\x02\x01B\x02\x01@\0\0z\x04\0\x09heap-base\x01\0\x03\0*miden:co\
re-intrinsics/intrinsics-mem@1.0.0\x05\x03\x01B\x1d\x01@\x01\x01aw\0v\x04\0\x12f\
rom-u64-unchecked\x01\0\x01@\x01\x01ay\0v\x04\0\x08from-u32\x01\x01\x01@\x01\x01\
av\0w\x04\0\x06as-u64\x01\x02\x01@\x02\x01av\x01bv\0v\x04\0\x03add\x01\x03\x04\0\
\x03sub\x01\x03\x04\0\x03mul\x01\x03\x04\0\x03div\x01\x03\x01@\x01\x01av\0v\x04\0\
\x03neg\x01\x04\x04\0\x03inv\x01\x04\x04\0\x04pow2\x01\x04\x04\0\x03exp\x01\x03\x01\
@\x02\x01av\x01bv\0z\x04\0\x02eq\x01\x05\x04\0\x02gt\x01\x05\x04\0\x02lt\x01\x05\
\x04\0\x02ge\x01\x05\x04\0\x02le\x01\x05\x01@\x01\x01av\0z\x04\0\x06is-odd\x01\x06\
\x01@\x01\x01av\x01\0\x04\0\x06assert\x01\x07\x04\0\x07assertz\x01\x07\x01@\x02\x01\
av\x01bv\x01\0\x04\0\x09assert-eq\x01\x08\x03\0+miden:core-intrinsics/intrinsics\
-felt@1.0.0\x05\x04\x01B\x02\x01@\0\x01\0\x04\0\x05break\x01\0\x03\0,miden:core-\
intrinsics/intrinsics-debug@1.0.0\x05\x05\x01B\x02\x01@\x02\x0bdigests-ptrz\x0ar\
esult-ptrz\x01\0\x04\0\x06hmerge\x01\0\x03\0-miden:core-intrinsics/intrinsics-cr\
ypto@1.0.0\x05\x06\x01B\x02\x01@\x04\x04key0v\x04key1v\x04key2v\x04key3v\0v\x04\0\
\x10adv-push-mapvaln\x01\0\x03\0-miden:core-intrinsics/intrinsics-advice@1.0.0\x05\
\x07\x01B\x02\x01@\x09\x02a0z\x02a1z\x02a2z\x02a3z\x02a4z\x02a5z\x02a6z\x02a7z\x0a\
result-ptrz\x01\0\x04\0\x0fhash-one-to-one\x01\0\x03\03miden:core-stdlib/stdlib-\
crypto-hashes-blake3@1.0.0\x05\x08\x01B\x02\x01@\x06\x09num-wordsv\x0aresult-ptr\
z\x02c0v\x02c1v\x02c2v\x02c3v\0z\x04\0\x17pipe-preimage-to-memory\x01\0\x03\0\"m\
iden:core-stdlib/stdlib-mem@1.0.0\x05\x09\x01B\x0f\x01@\x05\x06asset0v\x06asset1\
v\x06asset2v\x06asset3v\x0aresult-ptrz\x01\0\x04\0\x09add-asset\x01\0\x04\0\x0cr\
emove-asset\x01\0\x01@\x01\x0aresult-ptrz\x01\0\x04\0\x06get-id\x01\x01\x01@\x02\
\x05indexv\x0aresult-ptrz\x01\0\x04\0\x08get-item\x01\x02\x01@\x06\x05indexv\x06\
value0v\x06value1v\x06value2v\x06value3v\x0aresult-ptrz\x01\0\x04\0\x08set-item\x01\
\x03\x01@\x06\x05indexv\x04key0v\x04key1v\x04key2v\x04key3v\x0aresult-ptrz\x01\0\
\x04\0\x0cget-map-item\x01\x04\x01@\x0a\x05indexv\x04key0v\x04key1v\x04key2v\x04\
key3v\x06value0v\x06value1v\x06value2v\x06value3v\x0aresult-ptrz\x01\0\x04\0\x0c\
set-map-item\x01\x05\x01@\x01\x05valuey\x01\0\x04\0\x0aincr-nonce\x01\x06\x03\0\x1d\
miden:core-base/account@1.0.0\x05\x0a\x01B\x03\x01@\x01\x03ptrz\0z\x04\0\x0aget-\
inputs\x01\0\x04\0\x0aget-assets\x01\0\x03\0\x1amiden:core-base/note@1.0.0\x05\x0b\
\x01B\x04\x01@\x08\x03tagv\x03auxv\x09note-typev\x0eexecution-hintv\x0arecipient\
0v\x0arecipient1v\x0arecipient2v\x0arecipient3v\0v\x04\0\x0bcreate-note\x01\0\x01\
@\x06\x06asset0v\x06asset1v\x06asset2v\x06asset3v\x08note-idxv\x0aresult-ptrz\x01\
\0\x04\0\x11add-asset-to-note\x01\x01\x03\0\x18miden:core-base/tx@1.0.0\x05\x0c\x02\
\x03\0\0\x04word\x01B\x04\x02\x03\x02\x01\x0d\x04\0\x04word\x03\0\0\x01@\x01\x03\
arg\x01\x01\0\x04\0\x03run\x01\x02\x04\0\x1cmiden:base/note-script@1.0.0\x05\x0e\
\x04\0=miden:counter-contract-note/counter-contract-note-world@0.1.0\x04\0\x0b!\x01\
\0\x1bcounter-contract-note-world\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
